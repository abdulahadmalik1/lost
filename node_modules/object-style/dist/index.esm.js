import hash from 'fnv1a';

var id = function id(seed) {
  return 'x' + hash(seed).toString(36);
};

var hyphenate = function hyphenate(s) {
  return s.replace(/[A-Z]|^ms/g, '-$&').toLowerCase();
};

var createRule = function createRule(className, key, value, children, media) {
  var selector = '.' + className + children;
  var rule = selector + '{' + hyphenate(key) + ':' + value + '}';
  if (!media) return rule;
  return media + '{' + rule + '}';
};

var AT_REG = /^@/;
var AMP = /&/g;

var parse = function parse(obj, children, media) {
  if (children === void 0) {
    children = '';
  }

  var rules = [];
  var classNames = [];

  for (var key in obj) {
    var value = obj[key];
    if (value === null || value === undefined) continue;

    switch (typeof value) {
      case 'object':
        if (AT_REG.test(key)) {
          var _parse = parse(value, children, key),
              _className = _parse.className,
              css = _parse.css;

          classNames.push(_className);
          rules.push(css);
        } else {
          var child = key.replace(AMP, '');

          var _parse2 = parse(value, children + child, media),
              _className2 = _parse2.className,
              _css = _parse2.css;

          classNames.push(_className2);
          rules.push(_css);
        }

        continue;

      case 'number':
      case 'string':
        var className = id(key + value + children + (media || ''));
        var rule = createRule(className, key, value, children, media);
        classNames.push(className);
        rules.push(rule);
    }
  }

  return {
    className: classNames.join(' '),
    rules: rules,
    css: rules.join('')
  };
};

export default (function (obj) {
  if (obj === void 0) {
    obj = {};
  }

  return parse(obj);
});
