"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "withComponents", {
  enumerable: true,
  get: function get() {
    return _mdxProvider.withMDXComponents;
  }
});
exports.default = exports.MDXStyle = exports.createComponent = exports.join = exports.MDXStyleContext = void 0;

var _react = _interopRequireDefault(require("react"));

var _tag = require("@mdx-js/tag");

var _objectStyle = _interopRequireDefault(require("object-style"));

var _mdxProvider = require("@mdx-js/tag/dist/mdx-provider");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MDXStyleContext = _react.default.createContext({});

exports.MDXStyleContext = MDXStyleContext;

var join = function join() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.filter(Boolean).join(' ');
};

exports.join = join;

var createComponent = function createComponent(tag, className) {
  return function (props) {
    return _react.default.createElement(tag, _objectSpread({}, props, {
      className: join(className, props.className)
    }));
  };
}; // is this safe in IE11?
// const filterUnique = (value, i, self) => self.indexOf(value) === i


exports.createComponent = createComponent;

var unique = function unique(arr) {
  return _toConsumableArray(new Set(arr));
};

var MDXStyle =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MDXStyle, _React$Component);

  function MDXStyle() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MDXStyle);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MDXStyle)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "createComponents", function (props) {
      var styles = [];
      var components = Object.keys(props.css).reduce(function (a, key) {
        var style = props.css[key];
        var rule = (0, _objectStyle.default)(style);
        styles.push.apply(styles, _toConsumableArray(rule.rules));

        if (key === 'root') {
          var _component = createComponent('div', rule.className);

          return _objectSpread({}, a, _defineProperty({}, key, _component));
        }

        var base = key === 'inlineCode' ? 'code' : props.components[key] || key;
        var component = createComponent(base, rule.className);
        return _objectSpread({}, a, _defineProperty({}, key, component));
      }, props.components);
      return {
        components: components,
        // styles: styles.filter(filterUnique).join('')
        styles: unique(styles).join('')
      };
    });

    return _this;
  }

  _createClass(MDXStyle, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          css = _this$props.css,
          _components = _this$props.components,
          props = _objectWithoutProperties(_this$props, ["css", "components"]);

      var _this$createComponent = this.createComponents(this.props),
          components = _this$createComponent.components,
          styles = _this$createComponent.styles;

      var Root = components.root || function (props) {
        return _react.default.createElement("div", props);
      };

      return _react.default.createElement(_tag.MDXProvider, {
        components: components
      }, _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("style", {
        dangerouslySetInnerHTML: {
          __html: styles
        }
      }), _react.default.createElement(Root, props)));
    }
  }]);

  return MDXStyle;
}(_react.default.Component);

exports.MDXStyle = MDXStyle;

_defineProperty(MDXStyle, "defaultProps", {
  components: {
    pre: function pre(props) {
      return props.children;
    },
    code: function code(props) {
      return _react.default.createElement("pre", props);
    }
  },
  css: {}
});

var _default = MDXStyle;
exports.default = _default;